version: '3.8'

services:

#################### MONITORING ####################
  loki:
    image: grafana/loki:latest
    container_name: loki
    ports:
      - "3100:3100"
    volumes:
      - loki_data:/loki
    command: -config.file=/etc/loki/local-config.yaml
    healthcheck:
      test: ["CMD-SHELL", "wget --spider http://localhost:3100/ready || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 10s
    networks:
      - monitoring

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./ML_backend/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    healthcheck:
      test: ["CMD-SHELL", "wget --spider http://localhost:9090/-/healthy || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 10s
    networks:
      - monitoring
      - backend-network
  
  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    ports:
      - "3000:3000"
    volumes:
      - ./ML_backend/grafana/datasources.yaml:/etc/grafana/provisioning/datasources/datasources.yaml
      - ./ML_backend/grafana/provisioning/dashboards/dashboard.yml:/etc/grafana/provisioning/dashboards/dashboard.yml
      - ./ML_backend/grafana/provisioning/dashboards/ML_dashboard-1747323715280.json:/etc/grafana/provisioning/dashboards/ML_dashboard-1747323715280.json
      - ./ML_backend/grafana/provisioning/alerting/alert-rules.yaml:/etc/grafana/provisioning/alerting/alert-rules.yaml
      - ./ML_backend/grafana/provisioning/alerting/contact-points.yaml:/etc/grafana/provisioning/alerting/contact-points.yaml
      - grafana_data:/var/lib/grafana
    healthcheck:
      test: ["CMD-SHELL", "wget --spider http://localhost:3000/api/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    networks:
      - monitoring
      - backend-network

#################### APP #################### 

  postgres:
    image: postgres:latest
    container_name: postgres_fast_api
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: data123
      POSTGRES_DB: sgu_hack
      PGDATA: /var/lib/postgresql/data/pgdata
    ports:
      - "5432:5432"
    volumes:
      - pgdata:/var/lib/postgresql/data/pgdata
    deploy:
      resources:
        limits:
          cpus: '0.50'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M
    command: >
      postgres -c max_connections=1000
               -c shared_buffers=256MB
               -c effective_cache_size=768MB
               -c maintenance_work_mem=64MB
               -c checkpoint_completion_target=0.7
               -c wal_buffers=16MB
               -c default_statistics_target=100
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres_user -d postgres_db" ]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: unless-stopped
    tty: true
    stdin_open: true

#################### BACKEND #################### 
  ml_dev:
    build: 
      context: ./ML_backend/app
      dockerfile: Dockerfile.dev
      target: development
    container_name: ml_dev
    ports:
      - "8000:8000"
    volumes:
      - ./ML_backend/app:/app
      - ~/.cache/pypoetry:/root/.cache/pypoetry 
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8000/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    networks:
      - backend-network
      - monitoring 

  backend-dev:
    build: 
      context: ./Backend
      dockerfile: Dockerfile
      target: development
    container_name: backend-dev
    environment:
      - ENV=development
      - PYTHONUNBUFFERED=1
    volumes:
      - ./Backend:/app 
      - /app/pycache  
    ports:
      - "8001:8001"
    command: uvicorn main:app --host 0.0.0.0 --port 8001 --reload
    depends_on:
      - postgres
    networks:
      - backend-network
      - monitoring 

  promtail:
    image: grafana/promtail:latest
    container_name: promtail
    ports:
      - "9080:9080"
    volumes:
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - /var/run/docker.sock:/var/run/docker.sock
      - ./ML_backend/promtail-config.yml:/etc/promtail/config.yml
    command: -config.file=/etc/promtail/config.yml
    healthcheck:
      test: ["CMD-SHELL", "wget --spider http://localhost:9080/ready || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 10s
    networks:
      - monitoring
      - backend-network
    depends_on:
      loki:
        condition: service_healthy

#################### FRONTEND #################### 

  frontend_dev:
    build:
      context: ./Frontend
      dockerfile: Dockerfile.dev
    container_name: frontend_dev
    ports:
      - "3001:3001"
    volumes:
      - ./Frontend/frontend:/app
      - ./Frontend/frontend/node_modules:/app/node_modules

volumes:
  loki_data:
  prometheus_data:
  grafana_data:
  pgdata:
    driver: local

networks:
  backend-network:
    driver: bridge
  monitoring:
    driver: bridge