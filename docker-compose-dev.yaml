version: '3.8'

services:

#################### MONITORING ####################
  loki:
    image: grafana/loki:latest
    container_name: loki
    ports:
      - "3100:3100"
    volumes:
      - loki_data:/loki
    command: -config.file=/etc/loki/local-config.yaml
    healthcheck:
      test: ["CMD-SHELL", "wget --spider http://localhost:3100/ready || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 10s
    networks:
      - monitoring

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    healthcheck:
      test: ["CMD-SHELL", "wget --spider http://localhost:9090/-/healthy || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 10s
    networks:
      - monitoring
      - backend-network
  
  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    ports:
      - "3000:3000"
    volumes:
      - ./grafana/datasources.yaml:/etc/grafana/provisioning/datasources/datasources.yaml
      - ./grafana/provisioning/dashboards/dashboard.yml:/etc/grafana/provisioning/dashboards/dashboard.yml
      - ./grafana/provisioning/dashboards/ML_dashboard-1747323715280.json:/etc/grafana/provisioning/dashboards/ML_dashboard-1747323715280.json
      - ./grafana/provisioning/alerting/alert-rules.yaml:/etc/grafana/provisioning/alerting/alert-rules.yaml
      - ./grafana/provisioning/alerting/contact-points.yaml:/etc/grafana/provisioning/alerting/contact-points.yaml
      - grafana_data:/var/lib/grafana
    healthcheck:
      test: ["CMD-SHELL", "wget --spider http://localhost:3000/api/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    networks:
      - monitoring
      - backend-network

#################### APP #################### 

#  redis:
#    image: redis:7
#    container_name: redis
#    ports:
#      - "6379:6379"
#    healthcheck:
#      test: ["CMD", "redis-cli", "ping"]
#      interval: 30s
#      timeout: 10s
#      retries: 5
#      start_period: 10s
#    networks:
#      - backend-network

#################### BACKEND #################### 
  ml_dev:
    build: 
      context: ./ML_backend/app
      dockerfile: Dockerfile.dev
      target: development
    container_name: ml_dev
    ports:
      - "8000:8000"
    volumes:
      - ./ML_backend/app:/app
      - ~/.cache/pypoetry:/root/.cache/pypoetry 
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8000/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    networks:
      - backend-network
      - monitoring 

  backend-dev:
    build: 
      context: ./Backend
      dockerfile: Dockerfile
      target: development
    container_name: backend-dev
    environment:
      - ENV=development
      - PYTHONUNBUFFERED=1
    volumes:
      - ./Backend:/app 
      - /app/__pycache__  
    ports:
      - "8001:8001"
    command: uvicorn main:app --host 0.0.0.0 --port 8001 --reload
    restart: unless-stopped
    networks:
      - backend-network
      - monitoring 

  promtail:
    image: grafana/promtail:latest
    container_name: promtail
    ports:
      - "9080:9080"
    volumes:
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - /var/run/docker.sock:/var/run/docker.sock
      - ./promtail-config.yml:/etc/promtail/config.yml
    command: -config.file=/etc/promtail/config.yml
    healthcheck:
      test: ["CMD-SHELL", "wget --spider http://localhost:9080/ready || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 10s
    networks:
      - monitoring
      - backend-network
    depends_on:
      loki:
        condition: service_healthy

#################### FRONTEND #################### 

  # frontend_dev:
  #   build:
  #     context: ./Frontend
  #     dockerfile: Dockerfile.dev
  #   container_name: frontend_dev
  #   ports:
  #     - "3000:3000"
  #   volumes:
  #     - ./frontend:/app
  #     - ./frontend/node_modules:/app/node_modules

volumes:
  loki_data:
  prometheus_data:
  grafana_data:

networks:
  backend-network:
    driver: bridge
  monitoring:
    driver: bridge